 
- on_page_that_can_include_multiple_different_apps = params[:controller] == 'problems'
= form_tag do
  .tab-bar
    %ul
      - [:merge, :resolve, :unresolve, :delete].each do |action|
        %li= submit_tag t(".#{action}").capitalize, :id => "#{action}_problems", :class => 'button',
          :data => { :action => polymorphic_path([action == :delete ? :destroy : action, :several_problems]),
          :confirm => problem_confirm(action) }
  %table.errs.selectable
    %thead
      %tr
        %th= check_box_tag "toggle_problems_checkboxes"
        - if on_page_that_can_include_multiple_different_apps
          %th= link_for_sort t('.app')
        - else
          %th= link_for_sort t('.env'), 'environment'
        %th= link_for_sort t('.what_&_where').html_safe, "message"
        %th= link_for_sort t('.latest'), "last_notice_at"
        %th.count-header= link_for_sort t('.count')
        
        %th= t('.resolve')
    %tbody
      - ProblemDecorator.decorate_collection(problems).each do |problem|
        %tr{:class => problem.resolved? ? 'resolved' : 'unresolved'}
          %td.select.narrow-as-possible
            %div.td-container
              = check_box_tag "problems[]", problem.id, selected_problems.member?(problem.id.to_s)
          %td.app
            %div.td-container
              - if on_page_that_can_include_multiple_different_apps
                = link_to problem.app.name, app_path(problem.app), class: 'name nowrap', title: problem.app.name
                %span.environment{class: 'nowrap', title: problem.environment}
                  = link_to problem.environment, problems_path(:environment => problem.environment)
              - else
                %span.environment{class: 'nowrap', title: problem.environment}
                  = link_to problem.environment, app_path(problem.app, :environment => problem.environment)
          %td.message
            %div.td-container
              = link_to problem.link_text, app_problem_path(problem.app, problem), class: 'nowrap', title: problem.message
              %em{class: 'nowrap', title: problem.where}= problem.where
              
          %td.latest
            - value = "#{time_ago_in_words(problem.last_notice_at)} #{I18n.t('problems.table.ago')}"
            %div.td-container{class: 'nowrap', title: value}= value
          %td.count.narrow-as-possible
            %div.td-container= link_to problem.notices_count, app_problem_path(problem.app, problem)
            
          %td.resolve.narrow-as-possible
            %div.td-container= link_to image_tag("thumbs-up.png"), resolve_app_problem_path(problem.app, problem),
              :title => "Resolve", :method => :put, :data => { :confirm => problem_confirm('resolve_one') },
              :class => 'resolve' if problem.unresolved?
      - if problems.none?
        %tr
          %td{:colspan => 100}
            %em No problems here
  = paginate problems
